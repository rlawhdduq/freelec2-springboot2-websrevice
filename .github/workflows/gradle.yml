# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
env:
    CODEDEPLOY_NAME : freelec-springboot2-webservice
    CODEDEPLOY_GROUP : freelec-springboot2-webservice-group
    S3_BUCKET_NAME : freelec-sprinboot2-build-zip
jobs:
  build:

    runs-on: ubuntu-latest # 실행환경
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4 
    - name: Set up JDK 1.8 / JDK 설치
      uses: actions/setup-java@v4
      with:
        java-version: '18'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    #- name: Setup Gradle / Gradle 설치
    #  uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name : give permission gradle execute
      run : chmod +x gradlew
    - name: Build with Gradle Wrapper / Gradle 빌드 / --warning-mode all( 그레이들 호환을 무시하고 명령어 실행 )
      run: ./gradlew clean build --warning-mode all

    # Move the .jar file that is the work of Github Action to AWS S3
    - name : Make Directory for deliver / .jar파일을 담을 폴더 생성
      run : mkdir deploy
    - name : Copy the .jar file / .jar 파일 복사
      run : cp ./build/libs/*.jar ./deploy/
    - name : Make .jar file to zip file / .jar파일을 전달하기 위해서 zip파일로 압축(.jar파일은 전달이 불가능해서 압축하는 과정을 거친다)
      run : zip -r -qq -j ./$GITHUB_SHA.zip ./deploy
    - name : Deliver Created by zip file github action to AWS S3 / 압축된 .jar 파일을 aws s3로 전달
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: aws s3 cp --region ap-northeast-2 --acl private ./$GITHUB_SHA.zip s3://freelec-sprinboot2-build-zip/

    # Connect Github action to AWS CodeDeploy 
    - name : Request deploy to AWS CodeDeploy / 배포 요청
      run : aws deploy create-deployment --application-name ${{ env.CODEDEPLOY_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.CODEDEPLOY_GROUP }}--s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip
